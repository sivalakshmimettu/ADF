name: Deployment in ADF

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (qa or prod)'
        required: true
        default: 'qa'
        type: choice
        options:
          - qa
          - prod

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.confirm.outputs.proceed }}

    steps:
      - name: Confirm deployment to ${{ github.event.inputs.environment }}
        id: confirm
        run: |
          echo "Proceeding with deployment to ${{ github.event.inputs.environment }}"
          echo "proceed=true" >> $GITHUB_OUTPUT

  approve-qa:
    if: ${{ github.event.inputs.environment == 'qa' }}
    needs: pre-checks
    runs-on: ubuntu-latest
    environment:
      name: qa # this is where GitHub Environments will trigger manual approval
    steps:
      - name: Await approval for QA deployment
        run: echo "Approved QA deployment."

  approve-prod:
    if: ${{ github.event.inputs.environment == 'prod' }}
    needs: pre-checks
    runs-on: ubuntu-latest
    environment:
      name: prod # manual approval step in GitHub Environments
    steps:
      - name: Await approval for PROD deployment
        run: echo "Approved PROD deployment."

  deploy:
    name: Deploy ADF to ${{ github.event.inputs.environment }}
    needs: [approve-qa, approve-prod]
    if: |
      (github.event.inputs.environment == 'qa' && needs.approve-qa.result == 'success') ||
      (github.event.inputs.environment == 'prod' && needs.approve-prod.result == 'success')
    runs-on: ubuntu-latest

    env:
      TARGET_ENV: ${{ github.event.inputs.environment }}
      FACTORY_NAME: ${{ vars.FACTORY_NAME }}
      SERVICE_ENDPOINT: ${{ vars.SERVICE_ENDPOINT }}
      CONFIG_VALUES: ${{ vars[github.event.inputs.environment] }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Show selected environment
        run: |
          echo "Deploying to environment: $TARGET_ENV"
          echo "Loaded CONFIG_VALUES: $CONFIG_VALUES"

      - name: Extract config values and export as environment variables
        run: |
          for pair in ${CONFIG_VALUES//;/ }; do
            IFS='=' read -r key value <<< "$pair"
            echo "$key=$value"
            echo "$key=$value" >> $GITHUB_ENV
          done

      - name: Debug environment variables
        run: |
          echo "FACTORY_NAME = $FACTORY_NAME"
          echo "SERVICE_ENDPOINT = $SERVICE_ENDPOINT"

      - name: Show parameters.json before update
        run: cat ARMTemplateForFactory/parameters.json

      - name: Update parameters.json using jq
        run: |
          echo "Updating parameters.json using jq..."
          jq \
            --arg factoryName "$FACTORY_NAME" \
            --arg serviceEndpoint "$SERVICE_ENDPOINT" \
            '.parameters.factoryName.value = $factoryName
             | .parameters.LS_ABLOB_properties_typeProperties_serviceEndpoint.value = $serviceEndpoint' \
            ARMTemplateForFactory/parameters.json > temp.json && mv temp.json ARMTemplateForFactory/parameters.json

      - name: Show parameters.json after update
        run: cat ARMTemplateForFactory/parameters.json

      - name: Upload ARM Template and Parameters as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: arm-template-${{ github.run_number }}-${{ github.event.inputs.environment }}
          path: |
            ARMTemplateForFactory/parameters.json
            ARMTemplateForFactory/ARMTemplate.json

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Data Factory
        run: |
          echo "Deploying ADF ARM template to resource group: ${{ secrets.RESOURCE_GROUP_NAME }}"

          az deployment group create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --template-file ARMTemplateForFactory/ARMTemplate.json \
            --parameters @ARMTemplateForFactory/parameters.json
