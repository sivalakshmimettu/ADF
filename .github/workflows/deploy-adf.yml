name: Deploy ADF

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment to deploy (qa/prod)'
        required: true
        default: 'qa'
        type: choice
        options:
          - qa
          - prod

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}  # This links to qa/prod environments

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # Debug the ADF_CONFIG_VALUES to ensure it's being passed correctly
      - name: Debug environment-specific config
        run: |
          echo "Environment selected: ${{ inputs.environment }}"
          echo "QA Factory Name: ${{ secrets.QA_FACTORY_NAME }}"
          echo "QA Service Endpoint: ${{ secrets.QA_SERVICE_ENDPOINT }}"
          echo "Prod Factory Name: ${{ secrets.PROD_FACTORY_NAME }}"
          echo "Prod Service Endpoint: ${{ secrets.PROD_SERVICE_ENDPOINT }}"

      # Assign appropriate environment variables based on the selected environment
      - name: Set environment variables for the selected environment
        run: |
          if [ "${{ inputs.environment }}" == "qa" ]; then
            echo "Using QA Environment"
            echo "FACTORY_NAME=${{ secrets.QA_FACTORY_NAME }}" >> $GITHUB_ENV
            echo "SERVICE_ENDPOINT=${{ secrets.QA_SERVICE_ENDPOINT }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "prod" ]; then
            echo "Using PROD Environment"
            echo "FACTORY_NAME=${{ secrets.PROD_FACTORY_NAME }}" >> $GITHUB_ENV
            echo "SERVICE_ENDPOINT=${{ secrets.PROD_SERVICE_ENDPOINT }}" >> $GITHUB_ENV
          fi

      # Debug the parsed variables to ensure they are being set correctly
      - name: Print parsed environment variables
        run: |
          echo "FACTORY_NAME=$FACTORY_NAME"
          echo "SERVICE_ENDPOINT=$SERVICE_ENDPOINT"

      # View the original parameters.json file before update
      - name: View original parameters file
        run: cat ARMTemplateForFactory/parameters.json

      # Update parameters in the parameters.json file using jq
      - name: Update parameters using jq
        run: |
          echo "Updating parameters in parameters.json with FACTORY_NAME=$FACTORY_NAME and SERVICE_ENDPOINT=$SERVICE_ENDPOINT"
          jq \
            --arg factoryName "$FACTORY_NAME" \
            --arg serviceEndpoint "$SERVICE_ENDPOINT" \
            '.parameters.factoryName.value = $factoryName
            | .parameters.LS_ABLOB_properties_typeProperties_serviceEndpoint.value = $serviceEndpoint' \
            ARMTemplateForFactory/parameters.json > temp.json && mv temp.json ARMTemplateForFactory/parameters.json

      # View the updated parameters.json file
      - name: View updated parameters file
        run: cat ARMTemplateForFactory/parameters.json

      # Generate Artifact ID with Timestamp
      - name: Generate Artifact ID with Timestamp
        id: artifact_versioning
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          ARTIFACT_ID="arm-template-${{ github.run_number }}-${{ github.event.inputs.environment }}-$TIMESTAMP"
          echo "Generated Artifact ID: $ARTIFACT_ID"
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT

      # Upload ARM Template and Parameters as Artifact
      - name: Upload ARM Template and Parameters as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_versioning.outputs.artifact_id }}
          path: |
            ARMTemplateForFactory/parameters.json
            ARMTemplateForFactory/ARMTemplate.json

      # Simulate deployment
      - name: Simulate deployment
        run: |
          echo "Deploying ADF Factory: $FACTORY_NAME"
          echo "Service Endpoint: $SERVICE_ENDPOINT"
          echo "Using Artifact: $ARTIFACT_ID"
